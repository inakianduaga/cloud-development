# laucherJobs -
#
# This service is a wrapper to launch the base/user docker containers used by the cloudEnvironment
# starts on runlevel.
#
# http://askubuntu.com/questions/518048/upstart-multiple-parameters
#
description "Launches cloud-development base/user docker containers"
start on runlevel [2345]

stop on runlevel [016]
console log

# Hardcoded absolute paths we need for wiring startup
# Modify this to fit your installation folder structure
env BASE_PATH=/var/cloud-development/
env USERS_PATH=/var/cloud-development/demo/users
env CONFIG_PATH=/var/cloud-development/demo/config
env USERS_UTIL_PATH=/var/cloud-development/scripts/user_config.sh
env FRONTEND_PROXY_CERTIFICATES_PATH=/var/cloud-development/demo/certificates

pre-start script

    # Import utils
    source $USERS_UTIL_PATH

    # Derived variables
    BASE_HOSTNAME=$(getConfigKey BASE_HOSTNAME)

    #
    # Launch frontend proxy
    #
    start cloud_frontend_proxy CERTIFICATES_PATH=$FRONTEND_PROXY_CERTIFICATES_PATH BASE_HOSTNAME=$BASE_HOSTNAME USERS_CONFIG_PATH=$USERS_PATH

    #
    # Loop over all users
    #
    USERS="$(getUsers)"
    for p in ${USERS///$'\n'} ; do

      #http://stackoverflow.com/questions/10638538/split-string-with-bash-with-symbol
      IFS== read PREFIXED_USER ID <<< $p;

      # Useful variables
      USER=${PREFIXED_USER#"USER_"}
      USER=${USER,,} # to lowercase

      # Lauch authentication / webserver container pair
      if [ ! -z $(getUserWebserver $USER) ]; then

        # Webserver config
        webserver_container_name=$(getWebserverContainerNameByUser $USER)
        webserver_container_port=$(getWebserverPortByUserId $ID)
        webserver_container_repo_path="${PWD}$(getConfigKey BASE_CLOUD_USERS_FOLDER)${USER}/repo/"
        webserver_type=$(getUserWebserver $USER)
        webserver_port=$(getUserWebserverPort $USER)
        webserver_volume=$(getUserWebserverVolume $USER)
        webserver_docker_run_extras=$(getUserWebserverDockerCMDExtras $USER)

        # Authentication server config
        authentication_container_name=$(getWebserverAuthenticationContainerNameByUser $USER)
        authentication_container_webserver_port=$(getAuthenticationWebserverPortByUserId $ID)
        authentication_container_config_path="${PWD}$(getConfigKey BASE_CLOUD_USERS_FOLDER)${USER}/conf/authentication"

        # start user webserver container
        start cloud_webserver CONTAINER_PORT=$webserver_container_port PORT=webserver_port CONTAINER_REPO_PATH=$webserver_container_repo_path VOLUME=$webserver_volume DOCKER_RUN_EXTRAS=$webserver_docker_run_extras CONTAINER_NAME=$webserver_container_name TYPE=$webserver_type

        # start user webserver authentication container
        start cloud_authentication CONTAINER_PORT=$authentication_container_webserver_port AUTHENTICATION_CONFIG_PATH=$authentication_container_config_path PROXY_PORT=$webserver_container_port CONTAINER_NAME=$authentication_container_name

      fi

      # Lauch authentication / editor container pair
      if [ ! -z $(getUserEditor $USER) ]; then

        # Editor config
        editor_container_name=$(getEditorContainerNameByUser $USER)
        editor_container_port=$(getEditorPortByUserId $ID)
        editor_container_repo_path="${PWD}$(getConfigKey BASE_CLOUD_USERS_FOLDER)${USER}/repo/"
        editor_type=$(getUserEditor $USER)
        editor_port=$(getUserEditorPort $USER)
        editor_volume=$(getUserEditorVolume $USER)
        editor_docker_run_extras=$(getUserEditorDockerCMDExtras $USER)

        # Authentication server config
        authentication_container_name=$(getEditorAuthenticationContainerNameByUser $USER)
        authentication_container_editor_port=$(getAuthenticationEditorPortByUserId $ID)
        authentication_container_config_path="${PWD}$(getConfigKey BASE_CLOUD_USERS_FOLDER)${USER}/conf/authentication"

        # start user editor container
        start cloud_editor CONTAINER_PORT=$editor_container_port PORT=$editor_port CONTAINER_REPO_PATH=$editor_container_repo_path VOLUME=$editor_volume DOCKER_RUN_EXTRAS=$editor_docker_run_extras CONTAINER_NAME=$editor_container_name TYPE=$editor_type

        # start user editor authentication container
        start cloud_authentication CONTAINER_PORT=$authentication_container_editor_port AUTHENTICATION_CONFIG_PATH=$authentication_container_config_path PROXY_PORT=$editor_container_port CONTAINER_NAME=$authentication_container_name

      fi

    done

end script

post-stop script

    # We need to stop all services passing all the parameters just as we initialized them
    # TODO

end script